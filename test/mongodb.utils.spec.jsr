var assert = require('chai').assert;

var utils = require('../src/api/mongodb/utils');

var normalize = utils.normalize;
var denormalize = utils.denormalize;
var convertCategoryPath = utils.convertCategoryPath;

describe("mongodb utils: normalize & denormalize", function() {

  var _id    = '584565afec910a0db4fb8ef5';
  var userId = '5845e24dec910a0db4fb8f04';
  var date = new Date().toISOString();

  function denormalized_data() {
    return {
      _id: {$oid: _id},
      userId: {$oid: userId},
      date: {$date: date}
    }
  }

  function normalized_data() {
    return {
      _id: _id,
      userId: userId,
      date: date
    }
  }

  describe("test normalize function", function() {
    /*  rules for normalize:
          _id: {$oid: "xxxxxxxxxx"}    -> _id
          userId: {$oid: "xxxxxxxxxx"} -> userId
          date: {$date: "xxxxxxxxxx"}  -> date
    */

    it("normalize object", function() {
      assert.deepEqual(
        normalize(denormalized_data()),
        normalized_data()
      );
    });

    it("normalize array", function() {
      assert.deepEqual(
        [ normalize(denormalized_data()),
          normalize(denormalized_data()),
          normalize(denormalized_data()) ],
        [ normalized_data(),
          normalized_data(),
          normalized_data() ]
      );
    });

  });

  //========================================================================

  describe("test denormalize function", function() {
    /*  rules for denormalize:
          _id    -> _id: {$oid: "xxxxxxxxxx"}
          userId -> userId: {$oid: "xxxxxxxxxx"}
          date   -> date: {$date: "xxxxxxxxxx"}
    */

    it("denormalize object", function() {
      assert.deepEqual(
        denormalize(normalized_data(), false),
        denormalized_data()
      );
    });

    it("denormalize array", function() {
      assert.deepEqual(
        [ denormalize(normalized_data(), false),
          denormalize(normalized_data(), false),
          denormalize(normalized_data(), false) ],
        [ denormalized_data(),
          denormalized_data(),
          denormalized_data() ]
      );
    });

    it("result type after denormalize & stringify", function() {
      /* second argument of 'denormalize' is true by default */
      var result = denormalize(normalized_data());
      assert.isString(result);
    });

  });

  describe("complex denormalize & stringify & normalize", function() {

    it("processing", function() {
      /* get denormalized & stringified */
      var stringified = denormalize(normalized_data());
      /* parse to object */
      var obj = JSON.parse(stringified);
      /* normalize object */
      var norm = normalize(obj);
      /* compare with original object */
      assert.deepEqual(norm, normalized_data());
    });

  });



});

describe("mongodb utils: convert category path for nested arrays", function() {

  it("level: root", function() {
    /* second argument of 'denormalize' is true by default */
    var result = convertCategoryPath('root-path');
    assert.equal(result, 'categories');
  });

  it("level: 0", function() {
    /* second argument of 'denormalize' is true by default */
    var result = convertCategoryPath('0', 'sub');
    assert.equal(result, 'categories.0.sub');
  });

  it("level: 1", function() {
    /* second argument of 'denormalize' is true by default */
    var result = convertCategoryPath('0,1', 'sub');
    assert.equal(result, 'categories.0.sub.1.sub');
  });

  it("level: 2", function() {
    /* second argument of 'denormalize' is true by default */
    var result = convertCategoryPath('3,4,5', 'sub');
    assert.equal(result, 'categories.3.sub.4.sub.5.sub');
  });

});
